[versions]
detekt = "1.23.8"
flyway = "10.15.2"
hikariCP = "6.2.1"
http4k = "5.45.2.0"
jackson = "2.18.3"
jooq = "3.19.10"
jwtJava = "4.5.0"
flexmark = "0.64.8"
kotest = "5.9.1"
kotestTestcontainers = "2.0.2"
kotlin = "2.0.21"
kover = "0.9.1"
ktlint = "1.2.1"
ktlintPlugin = "12.1.1"
logback = "1.5.8"
mockito = "5.4.0"
postgres = "42.7.3"
result4k = "2.22.2.0"
shadowJar = "8.3.2"
slf4j = "2.0.17"
testcontainers = "1.20.6"

[plugins]
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
flyway = { id = "org.flywaydb.flyway", version.ref = "flyway" }
jooq = { id = "org.jooq.jooq-codegen-gradle", version.ref = "jooq" }
kotlinJvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlintPlugin" }
shadowJar = { id = "com.gradleup.shadow", version.ref = "shadowJar" }

[bundles]
codegen = [
    "postgreSql",
    "jooqPostgresExtension",
]

http4k = [
    "http4kClientOkHttp",
    "http4kCloudnative",
    "http4kMultipart",
    "http4kServerNetty",
    "http4kTemplatePebble",
    "http4kCore",
]

http4kTesting = [
    "http4kTestingApproval",
    "http4kTestingHamkrest",
    "http4kTestingKotest",
]

jackson = [
    "jacksonCore",
    "jacksonYaml",
    "jacksonKotlin",
]

jooq = [
    "jooq",
]

kotest = [
    "kotestRunner",
    "kotestAssertions",
]

logging = [
    "logback",
]

testcontainers = [
    "testcontainersPostgres",
    "kotestTestcontainers",
]

[libraries]
flywayPostgresql = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flyway" }
hikariConnectionPool = { module = "com.zaxxer:HikariCP", version.ref = "hikariCP" }
http4kClientOkHttp = { module = "org.http4k:http4k-client-okhttp", version.ref = "http4k" }
http4kCloudnative = { module = "org.http4k:http4k-cloudnative", version.ref = "http4k" }
http4kCore = { module = "org.http4k:http4k-core", version.ref = "http4k" }
http4kMultipart = { module = "org.http4k:http4k-multipart", version.ref = "http4k" }
http4kServerNetty = { module = "org.http4k:http4k-server-netty", version.ref = "http4k" }
http4kTemplatePebble = { module = "org.http4k:http4k-template-pebble", version.ref = "http4k" }
http4kTestingApproval = { module = "org.http4k:http4k-testing-approval", version.ref = "http4k" }
http4kTestingHamkrest = { module = "org.http4k:http4k-testing-hamkrest", version.ref = "http4k" }
http4kTestingKotest = { module = "org.http4k:http4k-testing-kotest", version.ref = "http4k" }
jacksonCore = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "jackson" }
jacksonKotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jacksonYaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }
jooq = { module = "org.jooq:jooq", version.ref = "jooq" }
jooqPostgresExtension = { module = "org.jooq:jooq-postgres-extensions", version.ref = "jooq" }
jwtJava = { module = "com.auth0:java-jwt", version.ref = "jwtJava" }
flexmark = {module = "com.vladsch.flexmark:flexmark-all", version.ref = "flexmark"}
kotestAssertions = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotestRunner = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotestTestcontainers = { module = "io.kotest.extensions:kotest-extensions-testcontainers", version.ref = "kotestTestcontainers" }
kotlinStdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
mockito = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockito" }
postgreSql = { module = "org.postgresql:postgresql", version.ref = "postgres" }
result4k = { module = "dev.forkhandles:result4k", version.ref = "result4k"}
result4kKotest = { module = "dev.forkhandles:result4k-kotest", version.ref = "result4k"}
shadowJar = { module = "com.gradleup.shadow:shadow-gradle-plugin", version.ref = "shadowJar" }
slf4j = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
testcontainersPostgres = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }