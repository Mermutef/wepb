/*
 * This file is generated by jOOQ.
 */
package ru.yarsu.db.generated.tables


import javax.annotation.processing.Generated

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import ru.yarsu.db.generated.Public
import ru.yarsu.db.generated.keys.POST_TO_MEDIA_PKEY
import ru.yarsu.db.generated.keys.POST_TO_MEDIA__POST_TO_MEDIA_MEDIA_NAME_FKEY
import ru.yarsu.db.generated.keys.POST_TO_MEDIA__POST_TO_MEDIA_POSTID_FKEY
import ru.yarsu.db.generated.tables.Media.MediaPath
import ru.yarsu.db.generated.tables.Posts.PostsPath
import ru.yarsu.db.generated.tables.records.PostToMediaRecord


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.10",
        "catalog version:03",
        "schema version:03"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class PostToMedia(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PostToMediaRecord>?,
    parentPath: InverseForeignKey<out Record, PostToMediaRecord>?,
    aliased: Table<PostToMediaRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PostToMediaRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.post_to_media</code>
         */
        val POST_TO_MEDIA: PostToMedia = PostToMedia()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PostToMediaRecord> = PostToMediaRecord::class.java

    /**
     * The column <code>public.post_to_media.id</code>.
     */
    val ID: TableField<PostToMediaRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.post_to_media.postid</code>.
     */
    val POSTID: TableField<PostToMediaRecord, Int?> = createField(DSL.name("postid"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.post_to_media.media_name</code>.
     */
    val MEDIA_NAME: TableField<PostToMediaRecord, String?> = createField(DSL.name("media_name"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PostToMediaRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PostToMediaRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PostToMediaRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.post_to_media</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.post_to_media</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.post_to_media</code> table reference
     */
    constructor(): this(DSL.name("post_to_media"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PostToMediaRecord>?, parentPath: InverseForeignKey<out Record, PostToMediaRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, POST_TO_MEDIA, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PostToMediaPath : PostToMedia, Path<PostToMediaRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PostToMediaRecord>?, parentPath: InverseForeignKey<out Record, PostToMediaRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<PostToMediaRecord>): super(alias, aliased)
        override fun `as`(alias: String): PostToMediaPath = PostToMediaPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PostToMediaPath = PostToMediaPath(alias, this)
        override fun `as`(alias: Table<*>): PostToMediaPath = PostToMediaPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<PostToMediaRecord, Int?> = super.getIdentity() as Identity<PostToMediaRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PostToMediaRecord> = POST_TO_MEDIA_PKEY
    override fun getReferences(): List<ForeignKey<PostToMediaRecord, *>> = listOf(POST_TO_MEDIA__POST_TO_MEDIA_POSTID_FKEY, POST_TO_MEDIA__POST_TO_MEDIA_MEDIA_NAME_FKEY)

    private lateinit var _posts: PostsPath

    /**
     * Get the implicit join path to the <code>public.posts</code> table.
     */
    fun posts(): PostsPath {
        if (!this::_posts.isInitialized)
            _posts = PostsPath(this, POST_TO_MEDIA__POST_TO_MEDIA_POSTID_FKEY, null)

        return _posts;
    }

    val posts: PostsPath
        get(): PostsPath = posts()

    private lateinit var _media: MediaPath

    /**
     * Get the implicit join path to the <code>public.media</code> table.
     */
    fun media(): MediaPath {
        if (!this::_media.isInitialized)
            _media = MediaPath(this, POST_TO_MEDIA__POST_TO_MEDIA_MEDIA_NAME_FKEY, null)

        return _media;
    }

    val media: MediaPath
        get(): MediaPath = media()
    override fun `as`(alias: String): PostToMedia = PostToMedia(DSL.name(alias), this)
    override fun `as`(alias: Name): PostToMedia = PostToMedia(alias, this)
    override fun `as`(alias: Table<*>): PostToMedia = PostToMedia(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PostToMedia = PostToMedia(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PostToMedia = PostToMedia(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PostToMedia = PostToMedia(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PostToMedia = PostToMedia(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PostToMedia = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PostToMedia = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PostToMedia = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PostToMedia = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PostToMedia = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PostToMedia = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PostToMedia = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PostToMedia = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PostToMedia = where(DSL.notExists(select))
}
