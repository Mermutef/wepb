/*
 * This file is generated by jOOQ.
 */
package ru.yarsu.db.generated.tables


import java.time.OffsetDateTime

import javax.annotation.processing.Generated

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import ru.yarsu.db.generated.Public
import ru.yarsu.db.generated.enums.PostStatus
import ru.yarsu.db.generated.keys.POSTS_PKEY
import ru.yarsu.db.generated.keys.POSTS__POSTS_AUTHORID_FKEY
import ru.yarsu.db.generated.keys.POSTS__POSTS_HASHTAG_FKEY
import ru.yarsu.db.generated.keys.POSTS__POSTS_MODERATORID_FKEY
import ru.yarsu.db.generated.keys.POSTS__POSTS_PREVIEW_FKEY
import ru.yarsu.db.generated.tables.Hashtags.HashtagsPath
import ru.yarsu.db.generated.tables.Media.MediaPath
import ru.yarsu.db.generated.tables.Users.UsersPath
import ru.yarsu.db.generated.tables.records.PostsRecord


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.10",
        "catalog version:03",
        "schema version:03"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Posts(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PostsRecord>?,
    parentPath: InverseForeignKey<out Record, PostsRecord>?,
    aliased: Table<PostsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PostsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.posts</code>
         */
        val POSTS: Posts = Posts()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PostsRecord> = PostsRecord::class.java

    /**
     * The column <code>public.posts.id</code>.
     */
    val ID: TableField<PostsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.posts.title</code>.
     */
    val TITLE: TableField<PostsRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>public.posts.preview</code>.
     */
    val PREVIEW: TableField<PostsRecord, String?> = createField(DSL.name("preview"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>public.posts.content</code>.
     */
    val CONTENT: TableField<PostsRecord, String?> = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.posts.hashtag</code>.
     */
    val HASHTAG: TableField<PostsRecord, Int?> = createField(DSL.name("hashtag"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.posts.event_date</code>.
     */
    val EVENT_DATE: TableField<PostsRecord, OffsetDateTime?> = createField(DSL.name("event_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.posts.creation_date</code>.
     */
    val CREATION_DATE: TableField<PostsRecord, OffsetDateTime?> = createField(DSL.name("creation_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>public.posts.last_modified_date</code>.
     */
    val LAST_MODIFIED_DATE: TableField<PostsRecord, OffsetDateTime?> = createField(DSL.name("last_modified_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>public.posts.authorid</code>.
     */
    val AUTHORID: TableField<PostsRecord, Int?> = createField(DSL.name("authorid"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.posts.moderatorid</code>.
     */
    val MODERATORID: TableField<PostsRecord, Int?> = createField(DSL.name("moderatorid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.posts.status</code>.
     */
    val STATUS: TableField<PostsRecord, PostStatus?> = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(PostStatus::class.java), this, "")

    private constructor(alias: Name, aliased: Table<PostsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PostsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PostsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.posts</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.posts</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.posts</code> table reference
     */
    constructor(): this(DSL.name("posts"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PostsRecord>?, parentPath: InverseForeignKey<out Record, PostsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, POSTS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PostsPath : Posts, Path<PostsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PostsRecord>?, parentPath: InverseForeignKey<out Record, PostsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<PostsRecord>): super(alias, aliased)
        override fun `as`(alias: String): PostsPath = PostsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PostsPath = PostsPath(alias, this)
        override fun `as`(alias: Table<*>): PostsPath = PostsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<PostsRecord, Int?> = super.getIdentity() as Identity<PostsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PostsRecord> = POSTS_PKEY
    override fun getReferences(): List<ForeignKey<PostsRecord, *>> = listOf(POSTS__POSTS_PREVIEW_FKEY, POSTS__POSTS_HASHTAG_FKEY, POSTS__POSTS_AUTHORID_FKEY, POSTS__POSTS_MODERATORID_FKEY)

    private lateinit var _media: MediaPath

    /**
     * Get the implicit join path to the <code>public.media</code> table.
     */
    fun media(): MediaPath {
        if (!this::_media.isInitialized)
            _media = MediaPath(this, POSTS__POSTS_PREVIEW_FKEY, null)

        return _media;
    }

    val media: MediaPath
        get(): MediaPath = media()

    private lateinit var _hashtags: HashtagsPath

    /**
     * Get the implicit join path to the <code>public.hashtags</code> table.
     */
    fun hashtags(): HashtagsPath {
        if (!this::_hashtags.isInitialized)
            _hashtags = HashtagsPath(this, POSTS__POSTS_HASHTAG_FKEY, null)

        return _hashtags;
    }

    val hashtags: HashtagsPath
        get(): HashtagsPath = hashtags()

    private lateinit var _postsAuthoridFkey: UsersPath

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>posts_authorid_fkey</code> key.
     */
    fun postsAuthoridFkey(): UsersPath {
        if (!this::_postsAuthoridFkey.isInitialized)
            _postsAuthoridFkey = UsersPath(this, POSTS__POSTS_AUTHORID_FKEY, null)

        return _postsAuthoridFkey;
    }

    val postsAuthoridFkey: UsersPath
        get(): UsersPath = postsAuthoridFkey()

    private lateinit var _postsModeratoridFkey: UsersPath

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>posts_moderatorid_fkey</code> key.
     */
    fun postsModeratoridFkey(): UsersPath {
        if (!this::_postsModeratoridFkey.isInitialized)
            _postsModeratoridFkey = UsersPath(this, POSTS__POSTS_MODERATORID_FKEY, null)

        return _postsModeratoridFkey;
    }

    val postsModeratoridFkey: UsersPath
        get(): UsersPath = postsModeratoridFkey()
    override fun `as`(alias: String): Posts = Posts(DSL.name(alias), this)
    override fun `as`(alias: Name): Posts = Posts(alias, this)
    override fun `as`(alias: Table<*>): Posts = Posts(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Posts = Posts(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Posts = Posts(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Posts = Posts(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Posts = Posts(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Posts = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Posts = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Posts = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Posts = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Posts = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Posts = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Posts = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Posts = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Posts = where(DSL.notExists(select))
}
