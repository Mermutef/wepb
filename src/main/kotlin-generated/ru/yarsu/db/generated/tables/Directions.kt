/*
 * This file is generated by jOOQ.
 */
package ru.yarsu.db.generated.tables


import javax.annotation.processing.Generated

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import ru.yarsu.db.generated.Public
import ru.yarsu.db.generated.keys.DIRECTIONS_NAME_KEY
import ru.yarsu.db.generated.keys.DIRECTIONS_PKEY
import ru.yarsu.db.generated.keys.DIRECTIONS__DIRECTIONS_BANNER_PATH_FKEY
import ru.yarsu.db.generated.keys.DIRECTIONS__DIRECTIONS_CHAIRMAN_ID_FKEY
import ru.yarsu.db.generated.keys.DIRECTIONS__DIRECTIONS_DEPUTY_СHAIRMAN_ID_FKEY
import ru.yarsu.db.generated.keys.DIRECTIONS__DIRECTIONS_LOGO_PATH_FKEY
import ru.yarsu.db.generated.tables.Media.MediaPath
import ru.yarsu.db.generated.tables.Users.UsersPath
import ru.yarsu.db.generated.tables.records.DirectionsRecord


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.10",
        "catalog version:04",
        "schema version:04"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Directions(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, DirectionsRecord>?,
    parentPath: InverseForeignKey<out Record, DirectionsRecord>?,
    aliased: Table<DirectionsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<DirectionsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.directions</code>
         */
        val DIRECTIONS: Directions = Directions()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DirectionsRecord> = DirectionsRecord::class.java

    /**
     * The column <code>public.directions.id</code>.
     */
    val ID: TableField<DirectionsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.directions.name</code>.
     */
    val NAME: TableField<DirectionsRecord, String?> = createField(DSL.name("name"), SQLDataType.CHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.directions.description</code>.
     */
    val DESCRIPTION: TableField<DirectionsRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.directions.logo_path</code>.
     */
    val LOGO_PATH: TableField<DirectionsRecord, String?> = createField(DSL.name("logo_path"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>public.directions.banner_path</code>.
     */
    val BANNER_PATH: TableField<DirectionsRecord, String?> = createField(DSL.name("banner_path"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>public.directions.chairman_id</code>.
     */
    val CHAIRMAN_ID: TableField<DirectionsRecord, Int?> = createField(DSL.name("chairman_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.directions.deputy_сhairman_id</code>.
     */
    val DEPUTY_СHAIRMAN_ID: TableField<DirectionsRecord, Int?> = createField(DSL.name("deputy_сhairman_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<DirectionsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<DirectionsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<DirectionsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.directions</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.directions</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.directions</code> table reference
     */
    constructor(): this(DSL.name("directions"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DirectionsRecord>?, parentPath: InverseForeignKey<out Record, DirectionsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, DIRECTIONS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class DirectionsPath : Directions, Path<DirectionsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DirectionsRecord>?, parentPath: InverseForeignKey<out Record, DirectionsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<DirectionsRecord>): super(alias, aliased)
        override fun `as`(alias: String): DirectionsPath = DirectionsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): DirectionsPath = DirectionsPath(alias, this)
        override fun `as`(alias: Table<*>): DirectionsPath = DirectionsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<DirectionsRecord, Int?> = super.getIdentity() as Identity<DirectionsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<DirectionsRecord> = DIRECTIONS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<DirectionsRecord>> = listOf(DIRECTIONS_NAME_KEY)
    override fun getReferences(): List<ForeignKey<DirectionsRecord, *>> = listOf(DIRECTIONS__DIRECTIONS_LOGO_PATH_FKEY, DIRECTIONS__DIRECTIONS_BANNER_PATH_FKEY, DIRECTIONS__DIRECTIONS_CHAIRMAN_ID_FKEY, DIRECTIONS__DIRECTIONS_DEPUTY_СHAIRMAN_ID_FKEY)

    private lateinit var _directionsLogoPathFkey: MediaPath

    /**
     * Get the implicit join path to the <code>public.media</code> table, via
     * the <code>directions_logo_path_fkey</code> key.
     */
    fun directionsLogoPathFkey(): MediaPath {
        if (!this::_directionsLogoPathFkey.isInitialized)
            _directionsLogoPathFkey = MediaPath(this, DIRECTIONS__DIRECTIONS_LOGO_PATH_FKEY, null)

        return _directionsLogoPathFkey;
    }

    val directionsLogoPathFkey: MediaPath
        get(): MediaPath = directionsLogoPathFkey()

    private lateinit var _directionsBannerPathFkey: MediaPath

    /**
     * Get the implicit join path to the <code>public.media</code> table, via
     * the <code>directions_banner_path_fkey</code> key.
     */
    fun directionsBannerPathFkey(): MediaPath {
        if (!this::_directionsBannerPathFkey.isInitialized)
            _directionsBannerPathFkey = MediaPath(this, DIRECTIONS__DIRECTIONS_BANNER_PATH_FKEY, null)

        return _directionsBannerPathFkey;
    }

    val directionsBannerPathFkey: MediaPath
        get(): MediaPath = directionsBannerPathFkey()

    private lateinit var _directionsChairmanIdFkey: UsersPath

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>directions_chairman_id_fkey</code> key.
     */
    fun directionsChairmanIdFkey(): UsersPath {
        if (!this::_directionsChairmanIdFkey.isInitialized)
            _directionsChairmanIdFkey = UsersPath(this, DIRECTIONS__DIRECTIONS_CHAIRMAN_ID_FKEY, null)

        return _directionsChairmanIdFkey;
    }

    val directionsChairmanIdFkey: UsersPath
        get(): UsersPath = directionsChairmanIdFkey()

    private lateinit var _directionsDeputyСhairmanIdFkey: UsersPath

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>directions_deputy_сhairman_id_fkey</code> key.
     */
    fun directionsDeputyСhairmanIdFkey(): UsersPath {
        if (!this::_directionsDeputyСhairmanIdFkey.isInitialized)
            _directionsDeputyСhairmanIdFkey = UsersPath(this, DIRECTIONS__DIRECTIONS_DEPUTY_СHAIRMAN_ID_FKEY, null)

        return _directionsDeputyСhairmanIdFkey;
    }

    val directionsDeputyСhairmanIdFkey: UsersPath
        get(): UsersPath = directionsDeputyСhairmanIdFkey()
    override fun `as`(alias: String): Directions = Directions(DSL.name(alias), this)
    override fun `as`(alias: Name): Directions = Directions(alias, this)
    override fun `as`(alias: Table<*>): Directions = Directions(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Directions = Directions(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Directions = Directions(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Directions = Directions(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Directions = Directions(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Directions = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Directions = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Directions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Directions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Directions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Directions = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Directions = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Directions = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Directions = where(DSL.notExists(select))
}
